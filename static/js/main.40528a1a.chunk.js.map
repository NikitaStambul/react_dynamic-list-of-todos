{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/FilterType.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","helpers/getFilteredTodos.ts","App.tsx","helpers/findTodoById.ts","index.tsx"],"names":["TodoList","todos","selectedTodoId","onSelect","className","map","id","completed","title","isSelected","classNames","type","onClick","TodoFilter","query","setQuery","filterType","setFilterType","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","headers","includes","json","reject","Error","status","statusText","catch","err","window","console","warn","FilterType","Loader","TodoModal","todo","unselect","deselectTodo","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","apiUser","href","email","name","App","setTodos","setSelectedTodoId","All","hasError","setHasError","visibleTodos","filter","lowecasedQuery","toLocaleLowerCase","fitsQuery","Active","Completed","getFilteredTodos","selectedTodo","find","findTodoById","fetchTodos","a","apiTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40528a1a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodoId: number;\n  onSelect: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onSelect,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({\n          id,\n          completed,\n          title,\n        }) => {\n          const isSelected = id === selectedTodoId;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                {completed\n                  ? (<p className=\"has-text-success\">{title}</p>)\n                  : (<p className=\"has-text-danger\">{title}</p>)}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelect(id)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames('far', {\n                        'fa-eye-slash': isSelected,\n                        'fa-eye': !isSelected,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ninterface Props {\n  query: string,\n  setQuery: React.Dispatch<React.SetStateAction<string>>,\n  filterType: FilterType,\n  setFilterType: React.Dispatch<React.SetStateAction<FilterType>>,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  filterType,\n  setFilterType,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => {\n              setFilterType(event.target.value as FilterType);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n          onChange={(event => {\n            setQuery(event.target.value);\n          })}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\" \"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        return Promise.reject(new Error(`${res.status} - ${res.statusText}`));\n      }\n\n      if (!res.headers.get('Content-Type')?.includes('application/json')) {\n        return Promise.reject(new Error('Content-Type is not json'));\n      }\n\n      return res.json();\n    })\n    .catch(err => {\n      window.console.warn(err);\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  todo: Todo;\n  deselectTodo: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  deselectTodo: unselect,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(apiUser => {\n        setUser(apiUser);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\" \"\n              onClick={unselect}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n              {user\n                ? (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                ) : (\n                  'Unknown user'\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FilterType } from '../types/FilterType';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  filterType: FilterType,\n  query: string,\n) => {\n  return todos.filter(todo => {\n    const lowecasedQuery = query.toLocaleLowerCase();\n    const lowercasedTitle = todo.title.toLocaleLowerCase();\n    const fitsQuery = lowercasedTitle.includes(lowecasedQuery);\n\n    switch (filterType) {\n      case FilterType.Active:\n        return !todo.completed && fitsQuery;\n      case FilterType.Completed:\n        return todo.completed && fitsQuery;\n      default:\n        return fitsQuery;\n    }\n  });\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { findTodoById } from './helpers/findTodoById';\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [filterType, setFilterType] = useState(FilterType.All);\n  const [query, setQuery] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const visibleTodos = getFilteredTodos(todos, filterType, query);\n  const selectedTodo = findTodoById(selectedTodoId, visibleTodos);\n\n  const fetchTodos = async () => {\n    try {\n      const apiTodos = await getTodos();\n\n      setTodos(apiTodos);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterType={filterType}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isLoading && !hasError && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={selectedTodoId}\n                  onSelect={setSelectedTodoId}\n                />\n              )}\n              {hasError && (\n                <h1>Something went wrong</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        selectedTodo && (\n          <TodoModal\n            todo={selectedTodo}\n            deselectTodo={() => setSelectedTodoId(0)}\n          />\n        )\n      }\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function findTodoById(id: number, todos: Todo[]) {\n  return todos.find(todo => todo.id === id) || null;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}